// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Janus
import Foundation
@_exported import Janus
import Security
import Swift
import SwiftyJSON
import TekCoreNetwork
import TekCoreService
import TerraInstancesManager
import UIKit
public protocol JanusAuthManagerDelegate : AnyObject {
  func janusDidUpdateAuthInfo()
  func janusDidClearAuthInfo()
}
@_hasMissingDesignatedInitializers public class FacebookAuthProvider {
  public static func credential(accessToken: Swift.String, userName: Swift.String?) -> Janus.AnyJanusCredential
  @objc deinit
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class GoogleAuthProvider {
  public static func credential(accessToken: Swift.String, userName: Swift.String?) -> Janus.AnyJanusCredential
  @objc deinit
}
public protocol JanusLoginDelegate : AnyObject {
  func janusWillGetAuthCredential()
  func janusHasLoginSuccess(authCredential: Janus.JanusAuthCredential)
  func janusHasLoginFail(error: Janus.JanusError?)
}
extension JanusLoginDelegate {
  public func janusWillGetAuthCredential()
}
public protocol JanusLoginMethod {
  var type: Janus.JanusLoginType { get }
  var name: Swift.String { get }
  var grantType: Swift.String { get }
}
extension JanusLoginMethod {
  public var code: Swift.String {
    get
  }
}
public protocol IPasswordlessCredential : Janus.JanusCredential {
  var phone: Swift.String { get }
  var pin: Swift.String { get }
}
@_hasMissingDesignatedInitializers public class PasswordlessCredential : Janus.IPasswordlessCredential {
  public typealias LoginMethod = Janus.PasswordlessLoginMethod
  public var phone: Swift.String
  public var pin: Swift.String
  public var loginMethod: Janus.PasswordlessLoginMethod!
  public var type: Janus.JanusLoginType {
    get
  }
  public var getTokenRequestData: Janus.GetTokenRequestData {
    get
  }
  @objc deinit
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: Janus.KeychainSwiftAccessOptions, b: Janus.KeychainSwiftAccessOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers public class AppleLoginMethod : Janus.SocialLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
  override public init(name: Swift.String = super, appId: Swift.String, grantType: Swift.String, authorizer: Swift.String)
  override public init(dict: [Swift.String : Any])
}
@_inheritsConvenienceInitializers public class GoogleLoginMethod : Janus.SocialLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
  override public init(name: Swift.String = super, appId: Swift.String, grantType: Swift.String, authorizer: Swift.String)
  override public init(dict: [Swift.String : Any])
}
public class SocialLoginMethod : Janus.BaseLoginMethod, Janus.AuthorizerHoldable {
  override public var type: Janus.JanusLoginType {
    get
  }
  public var authorizer: Swift.String {
    get
  }
  public var appId: Swift.String {
    get
  }
  public init(name: Swift.String = "", appId: Swift.String, grantType: Swift.String, authorizer: Swift.String)
  override public init(dict: [Swift.String : Any])
  override public init(name: Swift.String = super, grantType: Swift.String)
  @objc deinit
}
public class BaseLoginMethod : Janus.JanusLoginMethod {
  public var type: Janus.JanusLoginType {
    get
  }
  public var grantType: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public init(name: Swift.String = "", grantType: Swift.String)
  public init(dict: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PhoneAuthProvider {
  public func requestOTP(phone: Swift.String, completion: @escaping (Swift.Bool, Swift.Int?) -> Swift.Void)
  public func credential(pin: Swift.String) -> Janus.AnyJanusCredential
  @objc deinit
}
extension PhoneAuthProvider {
  public static func provider(app: TerraInstancesManager.ITerraApp? = nil) -> Janus.PhoneAuthProvider?
}
@_inheritsConvenienceInitializers public class PasswordlessLoginMethod : Janus.BaseLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
  override public init(name: Swift.String = super, grantType: Swift.String)
  override public init(dict: [Swift.String : Any])
}
public typealias JanusLoginUICallback = (Swift.Result<Janus.AnyJanusCredential, Janus.JanusError>) -> Swift.Void
public protocol JanusLoginUI : AnyObject {
  associatedtype LoginMethod : Janus.JanusLoginMethod
  var type: Janus.JanusLoginType { get }
  var callback: Janus.JanusLoginUICallback? { get set }
  func login(callback: @escaping Janus.JanusLoginUICallback)
  func logout()
  func register(loginMethod: Self.LoginMethod)
}
final public class AnyJanusLoginUI {
  public init<Base>(_ base: Base) where Base : Janus.JanusLoginUI
  final public var base: Any {
    get
  }
  final public var type: Janus.JanusLoginType {
    get
  }
  final public var callback: Janus.JanusLoginUICallback? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers public class UserPasswordLoginMethod : Janus.BaseLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
  override public init(name: Swift.String = super, grantType: Swift.String)
  override public init(dict: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class CustomAuthSystemAuthProvider {
  public static func credential(idToken: Swift.String) -> Janus.AnyJanusCredential
  @objc deinit
}
public protocol JanusCredential : Janus.LoginMethodHoldable {
  var type: Janus.JanusLoginType { get }
  var getTokenRequestData: Janus.GetTokenRequestData { get }
}
final public class AnyJanusCredential {
  public init<Base>(_ base: Base) where Base : Janus.JanusCredential
  final public var base: Any {
    get
  }
  final public var type: Janus.JanusLoginType {
    get
  }
  final public var getTokenRequestData: Janus.GetTokenRequestData {
    get
  }
  @objc deinit
}
public protocol ICustomAuthenticatorCredential : Janus.JanusCredential {
  var idToken: Swift.String { get }
}
@_hasMissingDesignatedInitializers public class CustomAuthenticatorCredential : Janus.ICustomAuthenticatorCredential {
  public typealias LoginMethod = Janus.CustomAuthenticatorLoginMethod
  public var idToken: Swift.String
  public var loginMethod: Janus.CustomAuthenticatorLoginMethod!
  public var type: Janus.JanusLoginType {
    get
  }
  public var getTokenRequestData: Janus.GetTokenRequestData {
    get
  }
  @objc deinit
}
public protocol ISocialCredential : Janus.JanusCredential where Self.LoginMethod : Janus.SocialLoginMethod {
  var userName: Swift.String? { get }
  var accessToken: Swift.String? { get }
}
extension ISocialCredential {
  public var getTokenRequestData: Janus.GetTokenRequestData {
    get
  }
}
@_hasMissingDesignatedInitializers public class AppleAuthProvider {
  public static func credential(accessToken: Swift.String, userName: Swift.String?) -> Janus.AnyJanusCredential
  @objc deinit
}
public protocol JanusAuthCredential {
  var idToken: Swift.String? { get }
  var accessToken: Swift.String? { get }
  var refreshToken: Swift.String? { get }
  var tokenExpiredSec: Swift.Int { get }
  var tokenType: Janus.TokenType? { get }
  var data: Foundation.Data? { get }
}
public struct OAuthConfig {
  public var clientId: Swift.String
  public var scopes: Swift.String
}
public class JanusGenerator : TerraInstancesManager.InstanceGeneratable {
  public typealias InstanceType = Janus.Janus
  required public init()
  public func generateInstance(app: TerraInstancesManager.ITerraApp) -> Janus.Janus?
  public func generateDefaultInstance(config: Janus.JanusConfig) -> Janus.Janus
  public func generateDefaultInstance(config: [Swift.String : Any]) -> Janus.Janus
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JanusInstancesPool : TerraInstancesManager.InstancesManageable {
  public typealias Generator = Janus.JanusGenerator
  public static var shared: Janus.JanusInstancesPool
  public var instances: [Swift.String : Janus.Janus]
  public static let DEFAULT_VALUE: Swift.String
  public var `default`: Janus.Janus {
    get
  }
  public func configureWith(config: Janus.JanusConfig)
  public func configureWith(config: [Swift.String : Any])
  public func configureWith(app: TerraInstancesManager.ITerraApp)
  public func auth(app: TerraInstancesManager.ITerraApp? = nil) -> Janus.Janus
  @objc deinit
}
public var TerraAuth: Janus.JanusInstancesPool
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: Janus.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: Janus.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: Janus.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
public protocol JanusLoginManagerProtocol {
  var loginDelegate: Janus.JanusLoginDelegate? { get set }
  var scopes: [Janus.JanusLoginMethod] { get }
  func login(credential: Janus.AnyJanusCredential, delegate: Janus.JanusLoginDelegate?) throws
  func logout()
}
@_hasMissingDesignatedInitializers public class JanusLoginManager : Janus.JanusLoginManagerProtocol {
  public var authManager: Janus.JanusAuthManager
  public var scopes: [Janus.JanusLoginMethod] {
    get
  }
  weak public var loginDelegate: Janus.JanusLoginDelegate?
  public func login(credential: Janus.AnyJanusCredential, delegate: Janus.JanusLoginDelegate?) throws
  public func logout()
  @objc deinit
}
public struct JanusConfig {
  public var oauthUrl: Swift.String
  public var identityUrl: Swift.String
  public var clientId: Swift.String
  public var scopes: Swift.String
  public var loginMethods: [Janus.JanusLoginMethod]
  public init(oauthUrl: Swift.String, identityUrl: Swift.String, clientId: Swift.String, scopes: Swift.String, loginMethods: [Janus.JanusLoginMethod])
}
@_hasMissingDesignatedInitializers public class TekAuthSystemAuthProvider {
  public static func credential(idToken: Swift.String?, accessToken: Swift.String, refreshToken: Swift.String, expiresIn: Swift.Int?, tokenType: Swift.String?) -> Janus.AnyJanusCredential
  @objc deinit
}
public protocol ITekAuthenticatorCredential : Janus.JanusCredential {
  var accessToken: Swift.String { get }
  var idToken: Swift.String? { get }
  var refreshToken: Swift.String { get }
  var expiresIn: Swift.Int? { get }
  var tokenType: Swift.String? { get }
}
@_hasMissingDesignatedInitializers public class TekAuthenticatorCredential : Janus.ITekAuthenticatorCredential {
  public typealias LoginMethod = Janus.TekAuthenticatorLoginMethod
  public var authorizer: Swift.String
  public var accessToken: Swift.String
  public var idToken: Swift.String?
  public var refreshToken: Swift.String
  public var expiresIn: Swift.Int?
  public var tokenType: Swift.String?
  public var loginMethod: Janus.TekAuthenticatorLoginMethod!
  public var type: Janus.JanusLoginType {
    get
  }
  public var getTokenRequestData: Janus.GetTokenRequestData {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GoogleCredential : Janus.ISocialCredential {
  public typealias LoginMethod = Janus.GoogleLoginMethod
  public var userName: Swift.String?
  public var accessToken: Swift.String?
  public var loginMethod: Janus.GoogleLoginMethod!
  public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
}
public enum JanusError : Swift.Error, Foundation.LocalizedError {
  case methodInfoNotFound
  case credentialNotFound
  case requestAuthenticatorTokenFailed(message: Swift.String?)
  case requestServerFailed(message: Swift.String?)
  case cancelled
  case unexpected
  public var localizedDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol SocialLoginUI : Janus.JanusLoginUI {
}
public typealias GetTokenRequestData = [Swift.String : Any]
public class TekAuthenticatorLoginMethod : Janus.BaseLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  public init()
  override public init(name: Swift.String = super, grantType: Swift.String)
  override public init(dict: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AppleCredential : Janus.ISocialCredential {
  public typealias LoginMethod = Janus.AppleLoginMethod
  public var loginMethod: Janus.AppleLoginMethod!
  public var authManager: Janus.JanusAuthManager!
  public var userName: Swift.String?
  public var accessToken: Swift.String?
  public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
}
public typealias OAuthLoginHandler = (Swift.Bool, Janus.JanusAuthCredential?, Janus.JanusError?) -> ()
public enum TokenType {
  case bearer
  public static func == (a: Janus.TokenType, b: Janus.TokenType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol JanusAuthManagerProtocol {
  var credential: Janus.JanusAuthCredential? { get }
  var isAuthorized: Swift.Bool { get }
  var authorizationToken: Swift.String? { get }
  var timeOut: Foundation.Date? { get }
  func refreshToken(completion: @escaping Janus.OAuthLoginHandler)
  func exchangeToken(audience: Swift.String, completion: @escaping Janus.OAuthLoginHandler)
}
@_hasMissingDesignatedInitializers public class JanusAuthManager : Janus.JanusAuthManagerProtocol {
  public var authorizationToken: Swift.String? {
    get
  }
  public var isAuthorized: Swift.Bool {
    get
  }
  public var credential: Janus.JanusAuthCredential?
  public var timeOut: Foundation.Date?
  weak public var delegate: Janus.JanusAuthManagerDelegate?
  @objc deinit
}
extension JanusAuthManager {
  public func refreshToken(completion: @escaping Janus.OAuthLoginHandler)
  public func exchangeToken(audience: Swift.String, completion: @escaping Janus.OAuthLoginHandler)
}
public enum JanusLoginType : Swift.String {
  case unknown
  case facebook
  case google
  case apple
  case passwordless
  case userPassword
  case customAuthenticator
  case tekAuthenticator
  case iBanking
  public static func initialize(code: Swift.String?) -> Janus.JanusLoginType?
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers public class FacebookLoginMethod : Janus.SocialLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
  override public init(name: Swift.String = super, appId: Swift.String, grantType: Swift.String, authorizer: Swift.String)
  override public init(dict: [Swift.String : Any])
}
public class CustomAuthenticatorLoginMethod : Janus.BaseLoginMethod, Janus.AuthorizerHoldable {
  override public var type: Janus.JanusLoginType {
    get
  }
  public var authorizer: Swift.String {
    get
  }
  public init(name: Swift.String = "", grantType: Swift.String, authorizer: Swift.String)
  override public init(dict: [Swift.String : Any])
  @objc deinit
  override public init(name: Swift.String = super, grantType: Swift.String)
}
public protocol LoginMethodHoldable : AnyObject {
  associatedtype LoginMethod : Janus.JanusLoginMethod
  var loginMethod: Self.LoginMethod! { get set }
}
public protocol AuthorizerHoldable {
  var authorizer: Swift.String { get }
}
@_hasMissingDesignatedInitializers public class Janus {
  public static let configName: Swift.String
  public func serviceCredential() -> TekCoreService.ServicesCredential
  public static func configure(appName: Swift.String = JanusInstancesPool.DEFAULT_VALUE, config: Janus.JanusConfig) -> Janus.Janus
  public static func configure(appName: Swift.String = JanusInstancesPool.DEFAULT_VALUE, config: [Swift.String : Any]) -> Janus.Janus
  public static func configure(app: TerraInstancesManager.ITerraApp) -> Janus.Janus
  @objc deinit
}
extension Janus : Janus.JanusAuthManagerProtocol {
  public var authorizationToken: Swift.String? {
    get
  }
  public var credential: Janus.JanusAuthCredential? {
    get
  }
  public var isAuthorized: Swift.Bool {
    get
  }
  public var timeOut: Foundation.Date? {
    get
  }
  public func exchangeToken(audience: Swift.String, completion: @escaping Janus.OAuthLoginHandler)
  public func refreshToken(completion: @escaping Janus.OAuthLoginHandler)
}
extension Janus : Janus.JanusLoginManagerProtocol {
  weak public var loginDelegate: Janus.JanusLoginDelegate? {
    get
    set
  }
  public var scopes: [Janus.JanusLoginMethod] {
    get
  }
  public func login(credential: Janus.AnyJanusCredential, delegate: Janus.JanusLoginDelegate?) throws
  public func logout()
}
extension Janus.KeychainSwiftAccessOptions : Swift.Equatable {}
extension Janus.KeychainSwiftAccessOptions : Swift.Hashable {}
extension Janus.TokenType : Swift.Equatable {}
extension Janus.TokenType : Swift.Hashable {}
extension Janus.JanusLoginType : Swift.Equatable {}
extension Janus.JanusLoginType : Swift.Hashable {}
extension Janus.JanusLoginType : Swift.RawRepresentable {}
